{"version":3,"sources":["js/action/index.js","components/MemeItems.js","js/action/info.js","components/MyMeme.js","App.js","reportWebVitals.js","js/reducers/index.js","index.js"],"names":["RX_MEMES","MY_MEMES","connect","createMeme","new_meme_obj","dispatch","params","bodyParms","Object","keys","map","key","encodeURIComponent","join","console","log","fetch","method","headers","body","then","res","json","data","postMemeJson","new_meme","type","meme","props","useState","hover","sethover","className","onMouseEnter","onMouseLeave","onClick","text0","text1","memeObj","template_id","id","setFlag","postMeme","src","url","alt","name","state","myMemes","limit","setLimit","set0","set1","flag","Form","inline","FormGroup","FormControl","onChange","e","target","value","memes","slice","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootreducer","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","subscribe","getState","dispacth","rxMemes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bd27009.chunk.js","sourcesContent":["import { username, password } from './info'\r\nexport const RX_MEMES = 'RX_MEMES';\r\nexport const MY_MEMES = 'MY_MEMES';\r\n\r\nfunction rxMemes(json) {\r\n    //const { memes } = json.data;\r\n    \r\n    return {\r\n        type:RX_MEMES,\r\n        memes:json.data\r\n    }\r\n}\r\n\r\nfunction fetchMemesJson(){\r\n    return fetch('https://api.imgflip.com/get_memes')\r\n    .then(data=>data.json())\r\n}\r\n\r\nexport function fetchMemes(){\r\n    return function(dispacth){\r\n        return fetchMemesJson()\r\n        .then(json=>dispacth(rxMemes(json)))\r\n    }\r\n}\r\n\r\nfunction myMeme(meme){\r\n    return {\r\n        type:MY_MEMES,\r\n        meme\r\n    }\r\n    \r\n}\r\n\r\nfunction postMemeJson(params){\r\n    params[\"username\"] = username;\r\n    params[\"password\"] = password;\r\n    \r\n    const bodyParms = Object.keys(params).map(key=>{\r\n        return encodeURIComponent(key)+'='+encodeURIComponent(params[key])\r\n    }).join('&');\r\n    console.log('bp', bodyParms);\r\n    \r\n    return fetch('https://api.imgflip.com/caption_image',{\r\n        method:\"POST\",\r\n        headers:{\r\n            'Content-Type':'application/x-www-form-urlencoded'\r\n        },\r\n        body:bodyParms\r\n    }).then(res=>res.json())\r\n    .then(data=>{\r\n        return data;\r\n    })\r\n\r\n}\r\n\r\nexport function createMeme(new_meme_obj){\r\n    return function(dispatch){\r\n        return postMemeJson(new_meme_obj)\r\n        .then(new_meme=>dispatch(myMeme(new_meme)))\r\n    }\r\n}","import React,{ useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createMeme } from '../js/action';\r\n\r\nfunction MemeItems(props){\r\n    let [hover,sethover] = useState(false);\r\n    \r\n    function postMeme(){\r\n        const { text0, text1 } = props;\r\n        const memeObj = {\r\n            template_id: props.meme.id,\r\n            text0,\r\n            text1\r\n            }\r\n        props.setFlag(0);\r\n        props.createMeme(memeObj);\r\n    }\r\n    return(\r\n        <div className=\"meme-item\" onMouseEnter={()=>sethover(true)} onMouseLeave={()=>sethover(false)} onClick={()=>postMeme()}>\r\n            <img src={props.meme.url} alt={props.meme.name} className={hover ? \"darken-img\":\"meme-img\"}/>\r\n            <p className={hover ? \"meme-txt\":\"no-txt\"}>{props.meme.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(null,{ createMeme })(MemeItems);","const username = \"kamalcBOB5\";\r\nconst password = \"imgflip@\";\r\n\r\nexport { username, password };","import { connect } from 'react-redux';\r\n\r\nfunction MyMeme(props){\r\n    //console.log(props.myMemes);\r\n    return(\r\n        <div className=\"my-memes\">\r\n            {\r\n            //props.myMemes && props.myMemes.map((e,i)=>(\r\n                props.myMemes.data && <img src={props.myMemes.data.url} alt=\"\" className=\"my-meme-img\"/>\r\n            //))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MapStateToProps(state){\r\n    return {\r\n        myMemes:state.myMemes\r\n    }\r\n}\r\n\r\nexport default connect(MapStateToProps,null)(MyMeme);","import React,{ useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, FormControl } from \"react-bootstrap\";\nimport './App.css';\nimport './css/style.css';\nimport MemeItem from './components/MemeItems'\nimport MyMeme from './components/MyMeme'\n\nfunction App(props) {\n  let [ limit,setLimit ] = useState(10);\n  let [ text0,set0 ] = useState(' ');\n  let [ text1,set1 ] = useState(' ');\n  let [ flag,setFlag ] = useState(1);\n  return (\n    <div className=\"App\">\n     <h1>MEME GENERATOR</h1>\n     <br />\n     {\n      (flag==1) && <>\n      <Form inline>\n        <FormGroup>\n        {' '}\n        TOP TEXT: <FormControl type=\"text\" onChange={(e)=>{ set0(e.target.value)}}/>{' '} \n        BOTTOM TEXT: <FormControl type=\"text\" onChange={(e)=>{ set1(e.target.value)}}/>\n        </FormGroup>\n        { ' ' }\n      </Form><br />\n        <div className=\"meme-show col-sm-12\">\n        <h1>Available Memes</h1>\n      {\n        props.memes.memes && props.memes.memes.slice(0,limit).map((meme,i)=>(\n                <>\n                <MemeItem key={i} meme={meme} text0={text0} text1={text1} setFlag={setFlag}/>\n                </>\n        ))\n      }\n      <div onClick={()=>{\n        setLimit(limit+10);              \n    }}>Load 10 more memes....</div>\n      </div>\n    </>\n    }\n    <div className=\"col-sm-12\">\n      {\n        flag==0 && <>\n        <MyMeme /><br />\n        <button className=\"btn btn-primary\" onClick={(e)=>{setFlag(1)}}>Back</button>\n        </>\n      }\n    </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state){\n    return state;\n}\n\nexport default connect(mapStateToProps,null)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { RX_MEMES, MY_MEMES } from '../action'\r\n\r\nfunction memes(state=[], action) {\r\n    switch (action.type){\r\n        case RX_MEMES:\r\n            return action.memes;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction myMemes(state=[],action){\r\n    switch(action.type){\r\n        case MY_MEMES:\r\n        //state = [...state, action.meme];\r\n        state = action.meme;\r\n        return state;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootreducer = combineReducers({memes,myMemes});\r\n\r\nexport default rootreducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './js/reducers';\nimport { fetchMemes } from './js/action';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nstore.subscribe(()=>console.log('store',store.getState()));\nstore.dispatch(fetchMemes());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}